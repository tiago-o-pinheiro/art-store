model Order {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    createdAt   DateTime  @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt
    deliveredAt DateTime? @db.Timestamp(6)
    paidAt      DateTime? @db.Timestamp(6)

    isDelivered Boolean @default(false)
    isPaid      Boolean @default(false)
    status      String

    itemsPrice    Decimal @db.Decimal(12, 2)
    shippingPrice Decimal @db.Decimal(12, 2)
    taxPrice      Decimal @db.Decimal(12, 2)
    totalPrice    Decimal @db.Decimal(12, 2)

    paymentMethod String
    paymentResult Json?  @db.Json

    userId String @db.Uuid
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    shippingAddressId String          @db.Uuid
    shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: NoAction)

    orderItems OrderItem[]
}

model OrderItem {
    image    String
    name     String
    price    Decimal @db.Decimal(12, 2)
    quantity Int
    slug     String

    orderId String @db.Uuid
    order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

    productId String  @db.Uuid
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@id([orderId, productId], map: "order_item_id_productId_pk")
}
